function SBAA_SPC()

    clc
    close all
    
    %% Main data directory
    global Dir
    Dir = '/Users/sudipvhaduri/Desktop/IEEE TBD/share/data/';
    
    %% list of subject IDs
    global subjList
    subjList=1:5;
        
    %% Set clustering parameters 
    global Tmax Tmin Dmax
    Tmax = 10; % minutes
    Tmin = 10; % minutes
    Dmax = 250; % meters
    
    disp('----------------------------------------------------------------')
    disp('Please enter ')
    disp('1 to execute getOnCampus_clusters()')
    disp('2 to execute combine_sbspc_nd_aaspc()')
    disp('anything else for Detailed evaluation of 5 clustering approaches')
    disp('----------------------------------------------------------------')
    op=input('Your choice : ');
    
    inDir_oncampus_sequence_sspc = [Dir 'outDir/SubjectLevel_sp_median_pairs_Tmin' num2str(Tmin) 'minutes_Dmax' num2str(Dmax) 'meters_BatteryExtensionsAt99BL_SequenceMerging_SSPC_onCampus/'];
    inDir_oncampus_sequence_bspc = [Dir 'outDir/SubjectLevel_sp_median_pairs_Tmin' num2str(Tmin) 'minutes_Dmax' num2str(Dmax) 'meters_BatteryExtensionsAt99BL_SequenceMerging_BSPC_onCampus/'];
    inDir_oncampus_sequence_sbspc = [Dir 'outDir/SubjectLevel_sp_median_pairs_Tmin' num2str(Tmin) 'minutes_Dmax' num2str(Dmax) 'meters_BatteryExtensionsAt99BL_SequenceMerging_SBSPC_onCampus/'];
    inDir_oncampus_sequence_aaspc = [Dir 'outDir/SubjectLevel_sp_median_pairs_Tmin' num2str(Tmin) 'minutes_Dmax' num2str(Dmax) 'meters_SequenceMerging_AASPC/'];    
    inDir_oncampus_sequence_sbaspc = [Dir 'outDir/SubjectLevel_sp_median_pairs_Tmin' num2str(Tmin) 'minutes_Dmax' num2str(Dmax) 'meters_BatteryExtensionsAt99BL_SequenceMerging_SBSPC_AASPC_onCampus/'];

    if(op==1) %% Fetch and Store ONLY oncampus clusters generated by SSPC, BSPC, SBSPC
        getOnCampus_clusters();
        return
    elseif(op==2) %% Combine SBSPC and AASPC generated clusters that are onCampus
        combine_sbspc_nd_aaspc(inDir_oncampus_sequence_sbspc,inDir_oncampus_sequence_aaspc);
        return
    else; disp('Detailed evaluation of 5 clustering approaches ...')
    end
    
    %% Detailed evaluation of 5 clustering approaches 
    cc_sspc_all_subj=[]; cc_bspc_all_subj=[]; cc_sbspc_all_subj=[]; cc_aaspc_all_subj=[]; cc_sbaspc_all_subj=[]; % cc = cluster count 
    ct_cluster_level_sspc_all_subj=[]; ct_subj_level_sspc_all_subj=[];
    ct_cluster_level_bspc_all_subj=[]; ct_subj_level_bspc_all_subj=[];
    ct_cluster_level_sbspc_all_subj=[]; ct_subj_level_sbspc_all_subj=[];
    ct_cluster_level_aaspc_all_subj=[]; ct_subj_level_aaspc_all_subj=[];
    ct_cluster_level_sbaspc_all_subj=[]; ct_subj_level_sbaspc_all_subjpc_all_subj=[];
    avg_cti_sspc_all_subj=[]; avg_cti_bspc_all_subj=[]; avg_cti_sbspc_all_subj=[]; avg_cti_aaspc_all_subj=[]; avg_cti_sbaspc_all_subj=[];
    
    for i=1:length(subjList)
        pid = subjList(i)

        %% Oncampus SBSPC generated clusters ++++++++++++++++++++++++++++++++++++++++++++++++++++++++
        FILE_Name = ['sp_pairs_seq_pid_' num2str(pid)];
        FILE = [inDir_oncampus_sequence_sbspc FILE_Name '.csv'];
        if(~exist(FILE, 'file')); continue; end
        fid2 = fopen(FILE);
        B = textscan(fid2,'%d%d%d','delimiter',',','headerlines',1);
        fclose(fid2);
        [sp_no_seq_st_sbspc,sp_no_seq_end_sbspc]=B{1,1:2}; 
        merged_unmerged_seq_sbspc=B{1,3}; % merged_unmerged(1=merged|0=unmerged|-1=unmerged when trying sequence merging due to D>Dmax from sp1||eah of these pairs has secondary info overlap during gap)
        sp_no_seq_sbspc=[sp_no_seq_st_sbspc sp_no_seq_end_sbspc];
        
        %% AASPC generated clusters from Oncampus POIs 
        FILE_Name = ['sp_pairs_seq_pid_' num2str(pid)];
        FILE = [inDir_oncampus_sequence_aaspc FILE_Name '.csv'];
        if(~exist(FILE, 'file')); continue; end
        fid2 = fopen(FILE);
        B = textscan(fid2,'%d%d%d','delimiter',',','headerlines',1);
        fclose(fid2);
        [sp_no_seq_st_aaspc,sp_no_seq_end_aaspc]=B{1,1:2}; 
        merged_unmerged_seq_aaspc=B{1,3}; % merged_unmerged(1=merged|0=unmerged|-1=undecided||each of these pairs has step counts during gap)
        sp_no_seq_aaspc=[sp_no_seq_st_aaspc sp_no_seq_end_aaspc];         
        
        %% SBASPC (SBSPC and AASPC) generarted Oncampus clusters 
        FILE_Name = ['sp_pairs_seq_pid_' num2str(pid)];
        FILE = [inDir_oncampus_sequence_sbaspc FILE_Name '.csv'];
        if(~exist(FILE, 'file')); continue; end
        fid2 = fopen(FILE);
        B = textscan(fid2,'%d%d%d','delimiter',',','headerlines',1);
        fclose(fid2);
        [sp_no_seq_st_sbaspc,sp_no_seq_end_sbaspc]=B{1,1:2}; 
        merged_unmerged_seq_sbaspc=B{1,3}; % merged_unmerged(1=merged|0=unmerged||each of these pairs has step counts or secondary session overlap during gap)
        sp_no_seq_sbaspc=[sp_no_seq_st_sbaspc sp_no_seq_end_sbaspc];
        
        %% Oncampus SSPC generated clusters ++++++++++++++++++++++++++++++++++++++++++++++++++++++++
        FILE_Name = ['sp_pairs_seq_pid_' num2str(pid)];
        FILE = [inDir_oncampus_sequence_sspc FILE_Name '.csv'];
        if(~exist(FILE, 'file')); continue; end
        fid2 = fopen(FILE);
        B = textscan(fid2,'%d%d%d','delimiter',',','headerlines',1);
        fclose(fid2);
        [sp_no_seq_st_sspc,sp_no_seq_end_sspc]=B{1,1:2}; 
        merged_unmerged_seq_sspc=B{1,3}; % merged_unmerged(1=merged|0=unmerged|-1=unmerged when trying sequence merging due to D>Dmax from sp1||eah of these pairs has secondary info overlap during gap)
        sp_no_seq_sspc=[sp_no_seq_st_sspc sp_no_seq_end_sspc];
        
        %% Oncampus BSPC generated clusters ++++++++++++++++++++++++++++++++++++++++++++++++++++++++
        FILE_Name = ['sp_pairs_seq_pid_' num2str(pid)];
        FILE = [inDir_oncampus_sequence_bspc FILE_Name '.csv'];
        if(~exist(FILE, 'file')); continue; end
        fid2 = fopen(FILE);
        B = textscan(fid2,'%d%d%d','delimiter',',','headerlines',1);
        fclose(fid2);
        [sp_no_seq_st_bspc,sp_no_seq_end_bspc]=B{1,1:2}; 
        merged_unmerged_seq_bspc=B{1,3}; % merged_unmerged(1=merged|0=unmerged|-1=unmerged when trying sequence merging due to D>Dmax from sp1||each of these pairs has secondary info overlap during gap)
        sp_no_seq_bspc=[sp_no_seq_st_bspc sp_no_seq_end_bspc];
        
        %% Discard Subjects that use portable charger as found in "Battery Recharge Behavior" survey
        portable_charger_pids = [69   405    82   189   415    18   361   440   192   342];
        if(ismember(pid,portable_charger_pids)); continue; end
        
        %% Performance Analysis
        ind_merged_sspc=find(merged_unmerged_seq_sspc==1); ind_unmerged_sspc=find(merged_unmerged_seq_sspc==0); % SSPC
        ind_merged_bspc=find(merged_unmerged_seq_bspc==1); ind_unmerged_bspc=find(merged_unmerged_seq_bspc==0); % BSPC
        ind_merged_sbspc=find(merged_unmerged_seq_sbspc==1); ind_unmerged_sbspc=find(merged_unmerged_seq_sbspc==0); % SBSPC
        ind_merged_aaspc=find(merged_unmerged_seq_aaspc==1); ind_unmerged_aaspc=find(merged_unmerged_seq_aaspc==0); % AASPC
        ind_merged_sbaspc=find(merged_unmerged_seq_sbaspc==1); ind_unmerged_sbaspc=find(merged_unmerged_seq_sbaspc==0); % SBASPC
        %% Cluster Count Decrease (CCD) >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        flag_sbaspc_ref=1; % 1 = sbaspc as ref for total # of clusters, 0 = relevant spc as ref for total # of clusters 
%         [cc_before,cc_after]=get_cc_before_after(sp_no_seq_sspc,ind_merged_sspc,ind_unmerged_sspc,flag_sbaspc_ref,sp_no_seq_sbaspc); % SSPC
        [cc_before,cc_after]=alternate_get_cc_before_after(sp_no_seq_sspc,ind_merged_sspc,ind_unmerged_sspc,flag_sbaspc_ref,sp_no_seq_sbaspc); % SSPC
        cc_sspc_all_subj=[cc_sspc_all_subj; [pid cc_before cc_after]];
%         [cc_before,cc_after]=get_cc_before_after(sp_no_seq_bspc,ind_merged_bspc,ind_unmerged_bspc,flag_sbaspc_ref,sp_no_seq_sbaspc); % BSPC
        [cc_before,cc_after]=alternate_get_cc_before_after(sp_no_seq_bspc,ind_merged_bspc,ind_unmerged_bspc,flag_sbaspc_ref,sp_no_seq_sbaspc); % BSPC
        cc_bspc_all_subj=[cc_bspc_all_subj; [pid cc_before cc_after]];
%         [cc_before,cc_after]=get_cc_before_after(sp_no_seq_sbspc,ind_merged_sbspc,ind_unmerged_sbspc,flag_sbaspc_ref,sp_no_seq_sbaspc); % SBSPC
        [cc_before,cc_after]=alternate_get_cc_before_after(sp_no_seq_sbspc,ind_merged_sbspc,ind_unmerged_sbspc,flag_sbaspc_ref,sp_no_seq_sbaspc); % SBSPC
        cc_sbspc_all_subj=[cc_sbspc_all_subj; [pid cc_before cc_after]];
%         [cc_before,cc_after]=get_cc_before_after(sp_no_seq_aaspc,ind_merged_aaspc,ind_unmerged_aaspc,flag_sbaspc_ref,sp_no_seq_sbaspc); % AASPC
        [cc_before,cc_after]=alternate_get_cc_before_after(sp_no_seq_aaspc,ind_merged_aaspc,ind_unmerged_aaspc,flag_sbaspc_ref,sp_no_seq_sbaspc); % AASPC
        cc_aaspc_all_subj=[cc_aaspc_all_subj; [pid cc_before cc_after]];
%         [cc_before,cc_after]=get_cc_before_after(sp_no_seq_sbaspc,ind_merged_sbaspc,ind_unmerged_sbaspc,flag_sbaspc_ref,sp_no_seq_sbaspc); % SBASPC
        [cc_before,cc_after]=alternate_get_cc_before_after(sp_no_seq_sbaspc,ind_merged_sbaspc,ind_unmerged_sbaspc,flag_sbaspc_ref,sp_no_seq_sbaspc); % SBASPC
        cc_sbaspc_all_subj=[cc_sbaspc_all_subj; [pid cc_before cc_after]];
        %% Cluster Time Increase (CTI) >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        flag_only_merged_clusters=1; % 1 = if want to compute CT based on ONLY merged clusters, 0 = both merged and unmerged clusters are considered for CT calculation
        % SSPC
        dt_before_after_subj=alternate_get_ct_before_after(pid,sp_no_seq_sspc,ind_merged_sspc,ind_unmerged_sspc,flag_sbaspc_ref,sp_no_seq_sbaspc,flag_only_merged_clusters,ind_merged_sbaspc);
        ct_cluster_level_sspc_all_subj=[ct_cluster_level_sspc_all_subj; dt_before_after_subj];
        ct_subj_level_sspc_all_subj=[ct_subj_level_sspc_all_subj; [pid sum(dt_before_after_subj,1)]];
        cti=(dt_before_after_subj(:,2)-dt_before_after_subj(:,1))./dt_before_after_subj(:,2).*100;
        avg_cti_sspc_all_subj=[avg_cti_sspc_all_subj; [pid mean(cti)]];
        % BSPC
        dt_before_after_subj=alternate_get_ct_before_after(pid,sp_no_seq_bspc,ind_merged_bspc,ind_unmerged_bspc,flag_sbaspc_ref,sp_no_seq_sbaspc,flag_only_merged_clusters,ind_merged_sbaspc);
        ct_cluster_level_bspc_all_subj=[ct_cluster_level_bspc_all_subj; dt_before_after_subj];
        ct_subj_level_bspc_all_subj=[ct_subj_level_bspc_all_subj; [pid sum(dt_before_after_subj,1)]];
        cti=(dt_before_after_subj(:,2)-dt_before_after_subj(:,1))./dt_before_after_subj(:,2).*100;
        avg_cti_bspc_all_subj=[avg_cti_bspc_all_subj; [pid mean(cti)]];
        % BSPC
        dt_before_after_subj=alternate_get_ct_before_after(pid,sp_no_seq_sbspc,ind_merged_sbspc,ind_unmerged_sbspc,flag_sbaspc_ref,sp_no_seq_sbaspc,flag_only_merged_clusters,ind_merged_sbaspc);
        ct_cluster_level_sbspc_all_subj=[ct_cluster_level_sbspc_all_subj; dt_before_after_subj];
        ct_subj_level_sbspc_all_subj=[ct_subj_level_sbspc_all_subj; [pid sum(dt_before_after_subj,1)]];
        cti=(dt_before_after_subj(:,2)-dt_before_after_subj(:,1))./dt_before_after_subj(:,2).*100;
        avg_cti_sbspc_all_subj=[avg_cti_sbspc_all_subj; [pid mean(cti)]];
        % ASPC
        dt_before_after_subj=alternate_get_ct_before_after(pid,sp_no_seq_aaspc,ind_merged_aaspc,ind_unmerged_aaspc,flag_sbaspc_ref,sp_no_seq_sbaspc,flag_only_merged_clusters,ind_merged_sbaspc);
        ct_cluster_level_aaspc_all_subj=[ct_cluster_level_aaspc_all_subj; dt_before_after_subj];
        ct_subj_level_aaspc_all_subj=[ct_subj_level_aaspc_all_subj; [pid sum(dt_before_after_subj,1)]];
        cti=(dt_before_after_subj(:,2)-dt_before_after_subj(:,1))./dt_before_after_subj(:,2).*100;
        avg_cti_aaspc_all_subj=[avg_cti_aaspc_all_subj; [pid mean(cti)]];
        % SBASPC
        dt_before_after_subj=alternate_get_ct_before_after(pid,sp_no_seq_sbaspc,ind_merged_sbaspc,ind_unmerged_sbaspc,flag_sbaspc_ref,sp_no_seq_sbaspc,flag_only_merged_clusters,ind_merged_sbaspc);
        ct_cluster_level_sbaspc_all_subj=[ct_cluster_level_sbaspc_all_subj; dt_before_after_subj];
        ct_subj_level_sbaspc_all_subjpc_all_subj=[ct_subj_level_sbaspc_all_subjpc_all_subj; [pid sum(dt_before_after_subj,1)]];
        cti=(dt_before_after_subj(:,2)-dt_before_after_subj(:,1))./dt_before_after_subj(:,2).*100;
        avg_cti_sbaspc_all_subj=[avg_cti_sbaspc_all_subj; [pid mean(cti)]];
        
    end
    %% Calculation of percent CCD 
    cc_sspc_all_subj=double(cc_sspc_all_subj); cc_bspc_all_subj=double(cc_bspc_all_subj); cc_sbspc_all_subj=double(cc_sbspc_all_subj); 
    cc_aaspc_all_subj=double(cc_aaspc_all_subj); cc_sbaspc_all_subj=double(cc_sbaspc_all_subj);
    disp(['Total Number of Subjects :: ' num2str(size(cc_sspc_all_subj,1))])
%     size(cc_sspc_all_subj) size(cc_bspc_all_subj) size(cc_sbspc_all_subj) size(cc_aaspc_all_subj) size(cc_sbaspc_all_subj)
    disp('Total Cluster Count <before,after> for sspc,bspc,sbspc,aaspc,sbaspc')
    sum([cc_sspc_all_subj(:,2:3) cc_bspc_all_subj(:,2:3) cc_sbspc_all_subj(:,2:3) cc_aaspc_all_subj(:,2:3) cc_sbaspc_all_subj(:,2:3)])
%     [cc_sspc_all_subj(:,2:3) cc_bspc_all_subj(:,2:3) cc_sbspc_all_subj(:,2:3) cc_aaspc_all_subj(:,2:3) cc_sbaspc_all_subj(:,2:3)]
    percent_ccd_sspc = (cc_sspc_all_subj(:,2)-cc_sspc_all_subj(:,3))./cc_sspc_all_subj(:,2)*100;
    percent_ccd_bspc = (cc_bspc_all_subj(:,2)-cc_bspc_all_subj(:,3))./cc_bspc_all_subj(:,2)*100;
    percent_ccd_sbspc = (cc_sbspc_all_subj(:,2)-cc_sbspc_all_subj(:,3))./cc_sbspc_all_subj(:,2)*100;
    percent_ccd_aaspc = (cc_aaspc_all_subj(:,2)-cc_aaspc_all_subj(:,3))./cc_aaspc_all_subj(:,2)*100;
    percent_ccd_sbaspc = (cc_sbaspc_all_subj(:,2)-cc_sbaspc_all_subj(:,3))./cc_sbaspc_all_subj(:,2)*100;
    percent_ccd=[percent_ccd_sspc percent_ccd_bspc percent_ccd_sbspc percent_ccd_aaspc percent_ccd_sbaspc];
    
    disp('% CCD statistics .....................................................')
    disp('Mean'); a=mean(percent_ccd)
    disp('SD'); std(percent_ccd)
    disp('Standard Error'); e=std(percent_ccd)./sqrt(size(percent_ccd,1))
    % Boxplot
    figure
    boxplot(percent_ccd)
    xLabels={'SA-SPC','BA-SPC','SBA-SPC','AA-SPC','SBAA-SPC'};
    xtl_all={};
    for i=1:size(xLabels,2)
        xtl=['\begin{tabular}{c} ' xLabels{i} '\\vs.\\ESPC' '\end{tabular}']; 
        xtl_all{end+1}=xtl;
    end
    set(gca,'xtick', 1:size(xLabels,2), 'XTickLabel', xtl_all, 'TickLabelInterpreter', 'latex');
    grid on
    ylabel('% CCD')
    % Bar graph
    figure
    bar(a,'c')
    hold on
    xLabels={'SA-SPC','BA-SPC','SBA-SPC','AA-SPC','SBAA-SPC'};
    xtl_all={};
    for i=1:size(xLabels,2)
        xtl=['\begin{tabular}{c} ' xLabels{i} '\\vs.\\ESPC' '\end{tabular}']; 
        xtl_all{end+1}=xtl;
        errorbar(i,a(i),e(i),'r*'); hold on
    end
    set(gca,'xtick', 1:size(xLabels,2), 'XTickLabel', xtl_all, 'TickLabelInterpreter', 'latex');
    grid on
    xlim([0.5 size(xLabels,2)+0.5])
    ylabel('Avg. CCD (%) per subject')
    %% Calculation of percent CTI -- cluster level  
    ct_cluster_level_sspc_all_subj=double(ct_cluster_level_sspc_all_subj); ct_cluster_level_bspc_all_subj=double(ct_cluster_level_bspc_all_subj); ct_cluster_level_sbspc_all_subj=double(ct_cluster_level_sbspc_all_subj);
    ct_cluster_level_aaspc_all_subj=double(ct_cluster_level_aaspc_all_subj); ct_cluster_level_sbaspc_all_subj=double(ct_cluster_level_sbaspc_all_subj);
    percent_cti_sspc = (ct_cluster_level_sspc_all_subj(:,2)-ct_cluster_level_sspc_all_subj(:,1))./ct_cluster_level_sspc_all_subj(:,2).*100;
    percent_cti_bspc = (ct_cluster_level_bspc_all_subj(:,2)-ct_cluster_level_bspc_all_subj(:,1))./ct_cluster_level_bspc_all_subj(:,2).*100;
    percent_cti_sbspc = (ct_cluster_level_sbspc_all_subj(:,2)-ct_cluster_level_sbspc_all_subj(:,1))./ct_cluster_level_sbspc_all_subj(:,2).*100;
    percent_cti_aaspc = (ct_cluster_level_aaspc_all_subj(:,2)-ct_cluster_level_aaspc_all_subj(:,1))./ct_cluster_level_aaspc_all_subj(:,2).*100;
    percent_cti_sbaspc = (ct_cluster_level_sbaspc_all_subj(:,2)-ct_cluster_level_sbaspc_all_subj(:,1))./ct_cluster_level_sbaspc_all_subj(:,2).*100;
    percent_cti_val=[percent_cti_sspc;percent_cti_bspc;percent_cti_sbspc;percent_cti_aaspc;percent_cti_sbaspc];
    percent_cti_grp=[ones(length(percent_cti_sspc),1);2*ones(length(percent_cti_bspc),1);3*ones(length(percent_cti_sbspc),1);4*ones(length(percent_cti_aaspc),1);5*ones(length(percent_cti_sbaspc),1)];
    disp('% CTI (Cluster-level) statistics .....................................................')
    xLabels={'SA-SPC','BA-SPC','SBA-SPC','AA-SPC','SBAA-SPC'};
    a=[]; e=[];
    for i=1:size(xLabels,2)
        ind_temp=find(percent_cti_grp==i);
        disp(['Mean, SD, and Standard Error and Paired T-test of ' xLabels{i}]); 
        [mean(percent_cti_val(ind_temp)) std(percent_cti_val(ind_temp)) std(percent_cti_val(ind_temp))./sqrt(length(ind_temp))]
        a=[a, mean(percent_cti_val(ind_temp))]; e=[e, std(percent_cti_val(ind_temp))./sqrt(length(ind_temp))];
        [h,p,ci,stats] = ttest(percent_cti_val(ind_temp)/100)
    end
    % Boxplot
    figure
    boxplot(percent_cti_val,percent_cti_grp)
    xLabels={'SA-SPC','BA-SPC','SBA-SPC','AA-SPC','SBAA-SPC'};
    xtl_all={};
    for i=1:size(xLabels,2)
        xtl=['\begin{tabular}{c} ' xLabels{i} '\\vs.\\ESPC' '\end{tabular}']; % xtl = xTickLabel
        xtl_all{end+1}=xtl;
    end
    set(gca,'xtick', 1:size(xLabels,2), 'XTickLabel', xtl_all, 'TickLabelInterpreter', 'latex');
    grid on
    ylabel('% CTI')
    % Bar graph
    figure 
    bar(a,'c')
    hold on
    xLabels={'SA-SPC','BA-SPC','SBA-SPC','AA-SPC','SBAA-SPC'};
    xtl_all={};
    for i=1:size(xLabels,2)
        xtl=['\begin{tabular}{c} ' xLabels{i} '\\vs.\\ESPC' '\end{tabular}']; % xtl = xTickLabel
        xtl_all{end+1}=xtl;
        errorbar(i,a(i),e(i),'r*'); hold on
    end
    set(gca,'xtick', 1:size(xLabels,2), 'XTickLabel', xtl_all, 'TickLabelInterpreter', 'latex');
    grid on
    xlim([0.5 size(xLabels,2)+0.5])
    ylabel('Avg. CTI (%) per cluster')
    %% PDF and CDF of CTI (Cluster-level) 
    inc = 10; %5 %  
    dt_improve_count_distribution = zeros(100/inc,size(xLabels,2));
    bin_counter = 0;
    for j=0:inc:100-inc
        bin_counter = bin_counter + 1;
        for k=1:size(xLabels,2)
            ind_temp=find(percent_cti_grp==k);
            ind_bin_count = find(percent_cti_val(ind_temp)>j & percent_cti_val(ind_temp)<=j+inc);
            dt_improve_count_distribution(bin_counter,k) = length(ind_bin_count);
        end
    end
    p_all=[]; c_all=[];
    for k=1:size(xLabels,2)
        p_temp=dt_improve_count_distribution(:,k)./sum(dt_improve_count_distribution(:,k));
        p_all=[p_all p_temp]; c_all=[c_all cumsum(p_temp)];
    end
    figure
    b = bar(p_all);
    xlim([.5 100/inc+.5])
    xtickLabels = {'10','20','30','40','50','60','70','80','90','100'};
    xticklabels(xtickLabels)
    b(1).FaceColor = 'r'; b(2).FaceColor = [0.69,0.19,0.38]; % Maroon
    b(3).FaceColor = [0.75,0.75,0]; 
    b(4).FaceColor = 'm'; b(5).FaceColor = 'c';
    hold on 
    plot(c_all(:,1),'rd--'); hold on 
    plot(c_all(:,2),'^--','Color',[0.69,0.19,0.38]); hold on  % Maroon 
    plot(c_all(:,3),'v:','Color',[0.75,0.75,0]); hold on  
    plot(c_all(:,4),'mo:'); hold on  
    plot(c_all(:,5),'cs--'); hold on  
    xlabel('% Increase in Cluster Time')
    ylabel('Probability')
    legend('SA-SPC vs. ESPC','BA-SPC vs. ESPC','SBA-SPC vs. ESPC','AA-SPC vs. ESPC','SBAA-SPC vs. ESPC','SA-SPC vs. ESPC','BA-SPC vs. ESPC','SBA-SPC vs. ESPC','AA-SPC vs. ESPC','SBAA-SPC vs. ESPC')
    grid on
    %% Calculation of percent CTI -- subject level  
    ct_subj_level_sspc_all_subj=double(ct_subj_level_sspc_all_subj); ct_subj_level_bspc_all_subj=double(ct_subj_level_bspc_all_subj); ct_subj_level_sbspc_all_subj=double(ct_subj_level_sbspc_all_subj);
    ct_subj_level_aaspc_all_subj=double(ct_subj_level_aaspc_all_subj); ct_subj_level_sbaspc_all_subjpc_all_subj=double(ct_subj_level_sbaspc_all_subjpc_all_subj);
    percent_cti_sspc = (ct_subj_level_sspc_all_subj(:,3)-ct_subj_level_sspc_all_subj(:,2))./ct_subj_level_sspc_all_subj(:,3).*100;
    percent_cti_bspc = (ct_subj_level_bspc_all_subj(:,3)-ct_subj_level_bspc_all_subj(:,2))./ct_subj_level_bspc_all_subj(:,3).*100;
    percent_cti_sbspc = (ct_subj_level_sbspc_all_subj(:,3)-ct_subj_level_sbspc_all_subj(:,2))./ct_subj_level_sbspc_all_subj(:,3).*100;
    percent_cti_aaspc = (ct_subj_level_aaspc_all_subj(:,3)-ct_subj_level_aaspc_all_subj(:,2))./ct_subj_level_aaspc_all_subj(:,3).*100;
    percent_cti_sbaspc = (ct_subj_level_sbaspc_all_subjpc_all_subj(:,3)-ct_subj_level_sbaspc_all_subjpc_all_subj(:,2))./ct_subj_level_sbaspc_all_subjpc_all_subj(:,3).*100;
%     percent_cti=[percent_cti_sspc percent_cti_bspc percent_cti_sbspc percent_cti_aaspc percent_cti_sbaspc];
    percent_cti=[avg_cti_sspc_all_subj(:,2) avg_cti_bspc_all_subj(:,2) avg_cti_sbspc_all_subj(:,2) avg_cti_aaspc_all_subj(:,2) avg_cti_sbaspc_all_subj(:,2)];
    percent_cti=double(percent_cti);
    disp('% CTI (Subject-level) statistics .....................................................')
    disp('Mean'); a=mean(percent_cti)
    disp('SD'); std(percent_cti)
    disp('Standard Error'); e=std(percent_cti)./sqrt(size(percent_cti,1))
    % Boxplot
    figure
    boxplot(percent_cti)
    xLabels={'SA-SPC','BA-SPC','SBA-SPC','AA-SPC','SBAA-SPC'};
    xtl_all={};
    for i=1:size(xLabels,2)
        xtl=['\begin{tabular}{c} ' xLabels{i} '\\vs.\\ESPC' '\end{tabular}']; 
        xtl_all{end+1}=xtl;
    end
    set(gca,'xtick', 1:size(xLabels,2), 'XTickLabel', xtl_all, 'TickLabelInterpreter', 'latex');
    grid on
    ylabel('Avg. CTI (%) per subject')
    % Bar graph
    figure
    bar(a,'c')
    hold on
    xLabels={'SA-SPC','BA-SPC','SBA-SPC','AA-SPC','SBAA-SPC'};
    xtl_all={};
    for i=1:size(xLabels,2)
        xtl=['\begin{tabular}{c} ' xLabels{i} '\\vs.\\ESPC' '\end{tabular}']; 
        xtl_all{end+1}=xtl;
        errorbar(i,a(i),e(i),'r*'); hold on
    end
    set(gca,'xtick', 1:size(xLabels,2), 'XTickLabel', xtl_all, 'TickLabelInterpreter', 'latex');
    grid on
    xlim([0.5 size(xLabels,2)+0.5])
    ylabel('Avg. CTI (%) per subject')
end
function combine_sbspc_nd_aaspc(inDir_oncampus_sequence_sbspc,inDir_oncampus_sequence_aaspc)
    global subjList
    
    for i=1:length(subjList)
        pid = subjList(i)

        %% Oncampus SBSPC generated clusters ++++++++++++++++++++++++++++++++++++++++++++++++++++++++
        FILE_Name = ['sp_pairs_seq_pid_' num2str(pid)];
        FILE = [inDir_oncampus_sequence_sbspc FILE_Name '.csv'];
        if(~exist(FILE, 'file')); continue; end
        fid2 = fopen(FILE);
        B = textscan(fid2,'%d%d%d','delimiter',',','headerlines',1);
        fclose(fid2);
        [sp_no_seq_st_sbspc,sp_no_seq_end_sbspc]=B{1,1:2}; 
        merged_unmerged_seq_sbspc=B{1,3}; % merged_unmerged(1=merged|0=unmerged|-1=unmerged when trying sequence merging due to D>Dmax from sp1||eah of these pairs has secondary info overlap during gap)
        sp_no_seq_sbspc=[sp_no_seq_st_sbspc sp_no_seq_end_sbspc];
        
        %% AASPC generated clusters from Oncampus POIs
        FILE_Name = ['sp_pairs_seq_pid_' num2str(pid)];
        FILE = [inDir_oncampus_sequence_aaspc FILE_Name '.csv'];
        if(~exist(FILE, 'file')); continue; end
        fid2 = fopen(FILE);
        B = textscan(fid2,'%d%d%d','delimiter',',','headerlines',1);
        fclose(fid2);
        [sp_no_seq_st_aaspc,sp_no_seq_end_aaspc]=B{1,1:2}; 
        merged_unmerged_seq_aaspc=B{1,3}; % merged_unmerged(1=merged|0=unmerged|-1=undecided||each of these pairs has step counts during gap)
        sp_no_seq_aaspc=[sp_no_seq_st_aaspc sp_no_seq_end_aaspc];
         
        %% Combine clusters generated by SBSPC and AASPC
        combine_sbspc_aaspc_clusters(pid,sp_no_seq_sbspc,merged_unmerged_seq_sbspc,sp_no_seq_aaspc,merged_unmerged_seq_aaspc);
    end
end
function getOnCampus_clusters()
    global subjList
    
    parfor i=1:length(subjList)
%     for i=1:length(subjList)
        pid = subjList(i)

        algo_type = {'SSPC','BSPC','SBSPC'};
        for j=1:size(algo_type,2)
            disp([algo_type{1,j} ' algorithm is running ...'])
%             pause
%             if(j~=size(algo_type,2)); continue; end
            fetch_n_store_oncampus_sleep_battery_clusters(algo_type{1,j},pid);
        end
    end
end
function dt_before_after_subj=alternate_get_ct_before_after(pid,sp_no_seq,ind_merged,ind_unmerged,flag_sbaspc_ref,sp_no_seq_sbaspc,flag_only_merged_clusters,ind_merged_sbaspc)
    global Dir
    global Tmin Tmax Dmax

    dt_before_after_subj=[];
    dt_merged_before_after_subj=[]; dt_unmerged=[]; dt_sbaspc_extra=[];

    ref_single_cluster_set=[];
    if(flag_sbaspc_ref==1)
        if(flag_only_merged_clusters==0)
            for i=1:size(sp_no_seq_sbaspc,1)
                for j=sp_no_seq_sbaspc(i,1):sp_no_seq_sbaspc(i,2)
                    ref_single_cluster_set=union(ref_single_cluster_set,j);
                end
            end
        else
            for i=1:length(ind_merged_sbaspc)
                for j=sp_no_seq_sbaspc(ind_merged_sbaspc(i),1):sp_no_seq_sbaspc(ind_merged_sbaspc(i),2)
                    ref_single_cluster_set=union(ref_single_cluster_set,j);
                end
            end
        end
    else
        if(flag_only_merged_clusters==0)
            for i=1:size(sp_no_seq,1)
                for j=sp_no_seq(i,1):sp_no_seq(i,2)
                    ref_single_cluster_set=union(ref_single_cluster_set,j);
                end
            end
        else
            for i=1:length(ind_merged)
                for j=sp_no_seq(ind_merged(i),1):sp_no_seq(ind_merged(i),2)
                    ref_single_cluster_set=union(ref_single_cluster_set,j);
                end
            end
        end
    end
%     disp('Ref single cluster set length') 
%     length(ref_single_cluster_set)
    %% Merged clusters before and after 
    merged_cc_after=0; 
    merged_cluster_no_before=[];
    for j=1:length(ind_merged)
%         merged_cluster_no_before_temp=(sp_no_seq(ind_merged(j),1):sp_no_seq(ind_merged(j),2))';
%         if(isempty(intersect(merged_cluster_no_before_temp,merged_cluster_no_before)) & ~isempty(intersect(merged_cluster_no_before_temp,ref_single_cluster_set)))
%             merged_cluster_no_before=union(merged_cluster_no_before,merged_cluster_no_before_temp);
%             merged_cc_after=merged_cc_after+1;
%         end
        flag_new_merge_seq=0;
        for k=sp_no_seq(ind_merged(j),1):sp_no_seq(ind_merged(j),2)
            if(~ismember(k,merged_cluster_no_before) & ismember(k,ref_single_cluster_set))
                merged_cluster_no_before=union(merged_cluster_no_before,k);
                flag_new_merge_seq=1;
            end
        end
        if(flag_new_merge_seq) 
            merged_cc_after=merged_cc_after+1;
        end
    end
%     merged_cc_after;
%     merged_cc_before=length(merged_cluster_no_before);
    %% Unmerged clusters 
    unmerged_cluster_no=union(sp_no_seq(ind_unmerged,1),sp_no_seq(ind_unmerged,2));
    unmerged_cluster_no=setdiff(unmerged_cluster_no,merged_cluster_no_before);
    unmerged_cluster_no=intersect(unmerged_cluster_no,ref_single_cluster_set);
    sbaspc_extra_cluster_no=setdiff(ref_single_cluster_set,union(unmerged_cluster_no,merged_cluster_no_before));
    
    
    %% Read all the sp-pairs with time extensions using sleep/battery sessions of an individual 
    inDir_pair=[Dir 'outDir/SubjectLevel_sp_median_pairs_Tmin' num2str(Tmin) 'minutes_Dmax' num2str(Dmax) 'meters_BatteryExtensionsAt99BL/'];
    FILE_Name = ['sp_pairs_pid_' num2str(pid)];
    FILE = [inDir_pair FILE_Name '.csv'];
    if(~exist(FILE, 'file')); return; end
    fid1 = fopen(FILE);
    % sp#1,sp#2,ds(meter-bet.medianCentroids),dt(minutes-bet.spBoundaries),on_off(both sp on-campus?),case#(using battery),uncovered_gap_bet_sp(in minutes|using battery),case#(using sleep), uncovered_gap_bet_sp(in minutes|using sleep),timeExtension(using battery),timeExtension(using sleep), merged(-1=NO INFO|0=NOT Merged|1=BOTH battery and sleep merged|2=battery merged|3=sleep merged|4=battery and sleep together merged),timeExtension(2values=merged|4values=extendedButNotMerged|empty=NotExtended),actualSpPairTime
    A = textscan(fid1,'%d%d%*f%*f%*d%*d%*s%*d%*s%*s%*s%d%s%s','delimiter',',','headerlines',1);
    fclose(fid1);
%         size(A)
    [sp_no_pair_st,sp_no_pair_end]=A{1,1:2}; merged_unmerged_pair=A{1,3}; [ext_ts,act_ts]=A{1,4:5};
    sp_no_pair=[sp_no_pair_st sp_no_pair_end];
    %% Cluster Time (before and after merging) -- For Merged Clusters 
    dt_merged_before_after_subj=[];
    for j=1:length(ind_merged)
        index=ind_merged(j);
        %% Find time before merge
        ind_single_sp=find(ismember(sp_no_pair(:,1),sp_no_seq(index,1):sp_no_seq(index,2)));
        dt_before=0; % act = actual 
        for k=ind_single_sp(1):ind_single_sp(end)
            act_str = act_ts{k};
            act_str = strsplit(act_str,';');
            dt_before = dt_before + str2num(act_str{1,2})-str2num(act_str{1,1});
        end
        %% Find time after merge
        ind_st=find(sp_no_pair(:,1)==sp_no_seq(index,1)); ind_end=find(sp_no_pair(:,2)==sp_no_seq(index,2));
        if(strcmp(ext_ts{ind_st},'') & strcmp(ext_ts{ind_end},''))
            act_str_st = act_ts{ind_st};
            act_str_st = strsplit(act_str_st,';');
            act_str_end = act_ts{ind_end};
            act_str_end = strsplit(act_str_end,';');
            dt_after = ( str2num(act_str_end{1,end})-str2num(act_str_st{1,1}) );
        elseif(strcmp(ext_ts{ind_st},''))
            act_str_st = act_ts{ind_st};
            act_str_st = strsplit(act_str_st,';');
            ext_str_end = ext_ts{ind_end};
            ext_str_end = strsplit(ext_str_end,';');
            dt_after = ( str2num(ext_str_end{1,end})-str2num(act_str_st{1,1}) );
        elseif(strcmp(ext_ts{ind_end},''))
            ext_str_st = ext_ts{ind_st};
            ext_str_st = strsplit(ext_str_st,';');
            act_str_end = act_ts{ind_end};
            act_str_end = strsplit(act_str_end,';');
            dt_after = ( str2num(act_str_end{1,end})-str2num(ext_str_st{1,1}) );
        else    
            ext_str_st = ext_ts{ind_st};
            ext_str_st = strsplit(ext_str_st,';');
            ext_str_end = ext_ts{ind_end};
            ext_str_end = strsplit(ext_str_end,';');
            dt_after = ( str2num(ext_str_end{1,end})-str2num(ext_str_st{1,1}) );
        end

        if(dt_after<dt_before)
            disp(['Pid# ' num2str(pid) ' has abnormal case for (' num2str(sp_no_seq(index,1)) ',' num2str(sp_no_seq(index,2)) ')'])
%                 int64([dt_after dt_before])
%                 pause
        else
            dt_merged_before_after_subj=[dt_merged_before_after_subj; [dt_before dt_after]];
        end        
    end
    dt_before_after_subj=dt_merged_before_after_subj;
    %% Cluster Time for Unmerged clusters 
%     if(flag_only_merged_clusters==0)
        %% Cluster Time -- For Unmerged Clusters
%         dt_unmerged=zeros(length(unmerged_cluster_no),1); %[];
        for j=1:length(unmerged_cluster_no)
            ind_temp=find(sp_no_pair(:,1)==unmerged_cluster_no(j));
            if(isempty(ind_temp)) % if the 2nd cluster in the last pair 
                ind_temp=find(sp_no_pair(:,2)==unmerged_cluster_no(j));
                act_str = act_ts{ind_temp};
                act_str = strsplit(act_str,';');
                dt = ( str2num(act_str{1,4})-str2num(act_str{1,3}) );
            else
                act_str = act_ts{ind_temp};
                act_str = strsplit(act_str,';');
                dt = ( str2num(act_str{1,2})-str2num(act_str{1,1}) );
            end
            dt_unmerged=[dt_unmerged; dt];
%             dt_unmerged(j,1)=dt;
        end
%         dt_before_after_subj=[dt_before_after_subj; [dt_unmerged dt_unmerged]];
        %% Cluster Time -- For Unmerged Clusters from SBASPC Extra
    %     if(flag_new_merge_seq)
%             dt_sbaspc_extra=zeros(length(sbaspc_extra_cluster_no),1);
            for j=1:length(sbaspc_extra_cluster_no)
                ind_temp=find(sp_no_pair(:,1)==sbaspc_extra_cluster_no(j));
                if(isempty(ind_temp)) % if the 2nd cluster in the last pair 
                    ind_temp=find(sp_no_pair(:,2)==sbaspc_extra_cluster_no(j));
                    act_str = act_ts{ind_temp};
                    act_str = strsplit(act_str,';');
                    dt = ( str2num(act_str{1,4})-str2num(act_str{1,3}) );
                else
                    act_str = act_ts{ind_temp};
                    act_str = strsplit(act_str,';');
                    dt = ( str2num(act_str{1,2})-str2num(act_str{1,1}) );
                end
                dt_sbaspc_extra=[dt_sbaspc_extra; dt];
%                 dt_sbaspc_extra(j,1)=dt;
            end
    %     end
%         dt_before_after_subj=[dt_before_after_subj; [dt_sbaspc_extra dt_sbaspc_extra]];
%     end
    if(flag_only_merged_clusters==1)% & flag_sbaspc_ref==1)
        dt_before_after_subj=[dt_before_after_subj; [dt_sbaspc_extra dt_sbaspc_extra]];
    elseif(flag_only_merged_clusters==0)
        dt_before_after_subj=[dt_before_after_subj; [dt_unmerged dt_unmerged]];
        dt_before_after_subj=[dt_before_after_subj; [dt_sbaspc_extra dt_sbaspc_extra]];
    else
        disp(['Undecided combination of flag_sbaspc_ref=' num2str(flag_sbaspc_ref) ', flag_only_merged_clusters=' num2str(flag_only_merged_clusters) ' for pid=' num2str(pid)])
    end
end
function [cc_before,cc_after]=alternate_get_cc_before_after(sp_no_seq,ind_merged,ind_unmerged,flag_sbaspc_ref,sp_no_seq_sbaspc)
    ref_single_cluster_set=[];
    if(flag_sbaspc_ref==1)
        for i=1:size(sp_no_seq_sbaspc,1)
            for j=sp_no_seq_sbaspc(i,1):sp_no_seq_sbaspc(i,2)
                ref_single_cluster_set=union(ref_single_cluster_set,j);
            end
        end
    else
        for i=1:size(sp_no_seq,1)
            for j=sp_no_seq(i,1):sp_no_seq(i,2)
                ref_single_cluster_set=union(ref_single_cluster_set,j);
            end
        end
    end
%     disp('Ref single cluster set length') 
%     length(ref_single_cluster_set)
    %% Count merged clusters before and after 
    merged_cc_after=0; 
    merged_cluster_no_before=[];
    for j=1:length(ind_merged)
%         merged_cluster_no_before_temp=(sp_no_seq(ind_merged(j),1):sp_no_seq(ind_merged(j),2))';
%         if(isempty(intersect(merged_cluster_no_before_temp,merged_cluster_no_before)) & ~isempty(intersect(merged_cluster_no_before_temp,ref_single_cluster_set)))
%             merged_cluster_no_before=union(merged_cluster_no_before,merged_cluster_no_before_temp);
%             merged_cc_after=merged_cc_after+1;
%         end
        flag_new_merge_seq=0;
        for k=sp_no_seq(ind_merged(j),1):sp_no_seq(ind_merged(j),2)
            if(~ismember(k,merged_cluster_no_before) & ismember(k,ref_single_cluster_set))
                merged_cluster_no_before=union(merged_cluster_no_before,k);
                flag_new_merge_seq=1;
            end
        end
        if(flag_new_merge_seq) 
            merged_cc_after=merged_cc_after+1;
        end
    end
    merged_cc_after;
    merged_cc_before=length(merged_cluster_no_before);
    %% Count unmerged clusters 
    unmerged_cluster_no=union(sp_no_seq(ind_unmerged,1),sp_no_seq(ind_unmerged,2));
    unmerged_cluster_no=setdiff(unmerged_cluster_no,merged_cluster_no_before);
    unmerged_cluster_no=intersect(unmerged_cluster_no,ref_single_cluster_set);
    sbaspc_extra_cluster_no=setdiff(ref_single_cluster_set,union(unmerged_cluster_no,merged_cluster_no_before));
    unmerged_cc=length(unmerged_cluster_no);
    unmerged_extra_cc=length(sbaspc_extra_cluster_no);
    %% Counting total number of clusters before and after merging 
    cc_before=merged_cc_before+unmerged_cc+unmerged_extra_cc;
    cc_after=merged_cc_after+unmerged_cc+unmerged_extra_cc;
%     pause
end
function combine_sbspc_aaspc_clusters(pid,sp_no_seq_sbspc,merged_unmerged_seq_sbspc,sp_no_seq_aaspc,merged_unmerged_seq_aaspc)
    global Dir
    global Tmin Tmax Dmax

    outDir_SeqMerge = [Dir 'outDir/SubjectLevel_sp_median_pairs_Tmin' num2str(Tmin) 'minutes_Dmax' num2str(Dmax) 'meters_BatteryExtensionsAt99BL_SequenceMerging_SBSPC_AASPC_onCampus/'];
    if(~exist(outDir_SeqMerge,'dir')); mkdir(outDir_SeqMerge); end
    
    %% Break the MERGED sequences into single sp-pairs
%         [sp_no_seq_sbspc merged_unmerged_seq_sbspc]
%         [sp_no_seq_aaspc merged_unmerged_seq_aaspc]
    ind_merged_sbspc=find(merged_unmerged_seq_sbspc==1);
    single_pairs_sbspc=[];
    for j=1:length(ind_merged_sbspc)
        for k=sp_no_seq_sbspc(ind_merged_sbspc(j),1):sp_no_seq_sbspc(ind_merged_sbspc(j),2)-1
            single_pairs_sbspc=[single_pairs_sbspc; [k k+1]];
        end
    end
%         single_pairs_sbspc
    ind_merged_aaspc=find(merged_unmerged_seq_aaspc==1);
    single_pairs_aaspc=[];
    for j=1:length(ind_merged_aaspc)
        for k=sp_no_seq_aaspc(ind_merged_aaspc(j),1):sp_no_seq_aaspc(ind_merged_aaspc(j),2)-1
            single_pairs_aaspc=[single_pairs_aaspc; [k k+1]];
        end
    end
%         single_pairs_aaspc
    %% Combine the unique MERGED single sp-pairs from SBSPC and AASPC
    ind_repetitive=find(ismember(single_pairs_aaspc(:,1),single_pairs_sbspc(:,1))); 
    ind_non_ind_repetitive=setdiff(1:length(single_pairs_aaspc),ind_repetitive);
    single_pairs_aaspc_sbspc=[single_pairs_sbspc; single_pairs_aaspc(ind_non_ind_repetitive,:)];
%         size(single_pairs_sbspc)
%         size(single_pairs_aaspc)
%         size(single_pairs_aaspc_sbspc)
%         pause
    %% Order the MERGED single sp-pairs based on start sp#
    [s,IX]=sort(single_pairs_aaspc_sbspc(:,1));
    single_pairs_aaspc_sbspc=single_pairs_aaspc_sbspc(IX,:);
    %% Group the single sp-pairs into sequences of multiple sp-pairs 
    seq_pairs_aaspc_sbspc=[];
    seq_st_sp_no=single_pairs_aaspc_sbspc(1,1);
    for j=1:size(single_pairs_aaspc_sbspc,1)-1
        if(j==size(single_pairs_aaspc_sbspc,1)-1 & single_pairs_aaspc_sbspc(j,2)~=single_pairs_aaspc_sbspc(j+1,1)) % last pair isn't part of any seq, i.e., an isolated pair
            seq_pairs_aaspc_sbspc=[seq_pairs_aaspc_sbspc; [seq_st_sp_no single_pairs_aaspc_sbspc(j,2)]];
            seq_pairs_aaspc_sbspc=[seq_pairs_aaspc_sbspc; single_pairs_aaspc_sbspc(j+1,:)];
        end
        if(single_pairs_aaspc_sbspc(j,2)~=single_pairs_aaspc_sbspc(j+1,1))
            seq_pairs_aaspc_sbspc=[seq_pairs_aaspc_sbspc; [seq_st_sp_no single_pairs_aaspc_sbspc(j,2)]];
            seq_st_sp_no=single_pairs_aaspc_sbspc(j+1,1);
        end
    end
%         seq_pairs_aaspc_sbspc
%         size(seq_pairs_aaspc_sbspc)
    %% Combine the UNMERGED single sp-pairs from SBSPC and AASPC
    ind_unmerged_sbspc=find(ismember(merged_unmerged_seq_sbspc,[0,-1])); single_unmerged_pairs_sbspc=sp_no_seq_sbspc(ind_unmerged_sbspc,:);
    ind_unmerged_aaspc=find(ismember(merged_unmerged_seq_aaspc,[0,-1])); single_unmerged_pairs_aaspc=sp_no_seq_aaspc(ind_unmerged_aaspc,:);
    %% Combine the unique UNMERGED single sp-pairs from SBSPC and AASPC
    ind_repetitive=find(ismember(single_unmerged_pairs_aaspc(:,1),single_unmerged_pairs_sbspc(:,1))); 
    ind_non_ind_repetitive=setdiff(1:length(ind_unmerged_aaspc),ind_repetitive);
    single_unmerged_pairs_aaspc_sbspc=[single_unmerged_pairs_sbspc; single_unmerged_pairs_aaspc(ind_non_ind_repetitive,:)];
%         size(single_unmerged_pairs_sbspc)
%         size(single_unmerged_pairs_aaspc)
%         size(single_unmerged_pairs_aaspc_sbspc)
    %% Write the merged/unmerged sp-pair sequence into a file after combining all sequences from SBSPC and AASPC
    if(~isempty(seq_pairs_aaspc_sbspc))
        OutFile_SeqMerge = [outDir_SeqMerge 'sp_pairs_seq_pid_' num2str(pid) '.csv'];
        fileID_SeqMerge = fopen(OutFile_SeqMerge,'w+');
        fprintf(fileID_SeqMerge,'st_sp#,end_sp#,merged_unmerged(1=merged|0=unmerged|-1''s are converted into 0s||each of these pairs has secondary info or activity overlap during gap)\n');
        %% The MERGED ones
        merged_unmerged=1;
        for k=1:size(seq_pairs_aaspc_sbspc,1)
            fprintf(fileID_SeqMerge,'%d,%d,%d\n',seq_pairs_aaspc_sbspc(k,:),merged_unmerged);
        end
        %% The UNMERGED ones
        merged_unmerged=0;
        for k=1:size(single_unmerged_pairs_aaspc_sbspc,1)
            fprintf(fileID_SeqMerge,'%d,%d,%d\n',single_unmerged_pairs_aaspc_sbspc(k,:),merged_unmerged);
        end
        fclose(fileID_SeqMerge);
    end
end
function fetch_n_store_oncampus_sleep_battery_clusters(algo_type,pid)
    global Dir
    global Tmin Tmax Dmax
    
    POI_mapped_cluster_dir = [Dir 'inDir/SubjectLevel_sp_median_Tmin' num2str(Tmin) 'minutes_Dmax' num2str(Dmax) 'meters_with_Place_Labels/'];
    inDir_sequence = [Dir 'outDir/SubjectLevel_sp_median_pairs_Tmin' num2str(Tmin) 'minutes_Dmax' num2str(Dmax) 'meters_BatteryExtensionsAt99BL_SequenceMerging_' algo_type '/'];
    outDir_SeqMerge = [Dir 'outDir/SubjectLevel_sp_median_pairs_Tmin' num2str(Tmin) 'minutes_Dmax' num2str(Dmax) 'meters_BatteryExtensionsAt99BL_SequenceMerging_' algo_type '_onCampus/'];
    if(~exist(outDir_SeqMerge,'dir')); mkdir(outDir_SeqMerge); end
    
    %% Read POI mapped clusters of a subject 
    File = [POI_mapped_cluster_dir 'sp_pid_' num2str(pid) '.csv'];
    if(~exist(File,'file')); return; end
    fid2 = fopen(File);
    % sp#,st_ts,end_ts,maj_onCampus
    B = textscan(fid2,'%d%f%f%s','delimiter',',','headerlines',1);
    fclose(fid2);
    cno_c=B{1,1}; % 'cno_c' cno = cluster no, c subscript = cluster
    poi_on_c=B{1,4};
        
    %% SSPC, BSPC, SBSPC ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    FILE_Name = ['sp_pairs_seq_pid_' num2str(pid)];
    FILE = [inDir_sequence FILE_Name '.csv'];
    if(~exist(FILE, 'file')); return; end
    fid2 = fopen(FILE);
    B = textscan(fid2,'%d%d%d','delimiter',',','headerlines',1);
    fclose(fid2);
    [sp_no_seq_st_sbspc,sp_no_seq_end_sbspc]=B{1,1:2}; merged_unmerged_seq_sbspc=B{1,3};
    sp_no_seq_sbspc=[sp_no_seq_st_sbspc sp_no_seq_end_sbspc];

    %% Find ONLY on-campus SSPC, BSPC, SBSPC generated sp-clusters 
    ind_merged=find(merged_unmerged_seq_sbspc==1); % merged ones 
    ind_sp=find(ismember(cno_c,sp_no_seq_sbspc(ind_merged,1)) & strcmp(poi_on_c,'1')); % on-campus
    oncampus_sp_no_seq=[];
    if(~isempty(ind_sp)) 
        for j=1:length(ind_sp)
            ind_oncampus=find(sp_no_seq_sbspc(:,1)==cno_c(ind_sp(j)));
            if(~isempty(ind_oncampus))
                oncampus_sp_no_seq=[oncampus_sp_no_seq; [sp_no_seq_sbspc(ind_oncampus,:) merged_unmerged_seq_sbspc(ind_oncampus)]];
            end
        end
        %% NO need to check get ONLY unmerged clusters if the subject doesn't have any merged cluster
        ind_unmerged=find(ismember(merged_unmerged_seq_sbspc,[0,-1])); % unmerged ones including those that can't be merged as a sequence 
        ind_sp=find(ismember(cno_c,sp_no_seq_sbspc(ind_unmerged,1)) & strcmp(poi_on_c,'1')); % on-campus
        if(~isempty(ind_sp)) 
            for j=1:length(ind_sp)
                ind_oncampus=find(sp_no_seq_sbspc(:,1)==cno_c(ind_sp(j)));
                if(~isempty(ind_oncampus))
                    oncampus_sp_no_seq=[oncampus_sp_no_seq; [sp_no_seq_sbspc(ind_oncampus,:) merged_unmerged_seq_sbspc(ind_oncampus)]];
                end
            end
        end
    end
%         oncampus_sp_no_seq
    disp('# irrespective of location:'); length(merged_unmerged_seq_sbspc)
    disp('# on-campus:'); size(oncampus_sp_no_seq)
    %% Write ONLY on-campus SSPC, BSPC, SBSPC generated clusters
    if(~isempty(oncampus_sp_no_seq))
        OutFile_SeqMerge = [outDir_SeqMerge 'sp_pairs_seq_pid_' num2str(pid) '.csv'];
        fileID_SeqMerge = fopen(OutFile_SeqMerge,'w+');
        fprintf(fileID_SeqMerge,'st_sp#,end_sp#,merged_unmerged(1=merged|0=unmerged|-1=unmerged when trying sequence merging due to D>Dmax from sp1||each of these pairs has secondary info overlap during gap)\n');
        for k=1:size(oncampus_sp_no_seq,1)
            fprintf(fileID_SeqMerge,'%d,%d,%d\n',oncampus_sp_no_seq(k,:));
        end
        fclose(fileID_SeqMerge);
    end 
end